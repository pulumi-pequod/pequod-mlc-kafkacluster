// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k8sdatadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi-pequod/pequod-mlc-k8sdatadog/sdk/go/k8sdatadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type K8sMonitor struct {
	pulumi.ResourceState

	// Namespace in which datadog agent is installed.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
}

// NewK8sMonitor registers a new resource with the given unique name, arguments, and options.
func NewK8sMonitor(ctx *pulumi.Context,
	name string, args *K8sMonitorArgs, opts ...pulumi.ResourceOption) (*K8sMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8sMonitor
	err := ctx.RegisterRemoteComponentResource("k8sdatadog:index:K8sMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type k8sMonitorArgs struct {
	// Datadog API key needed by k8s agent to communicate with Datadog
	ApiKey string `pulumi:"apiKey"`
}

// The set of arguments for constructing a K8sMonitor resource.
type K8sMonitorArgs struct {
	// Datadog API key needed by k8s agent to communicate with Datadog
	ApiKey pulumi.StringInput
}

func (K8sMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sMonitorArgs)(nil)).Elem()
}

type K8sMonitorInput interface {
	pulumi.Input

	ToK8sMonitorOutput() K8sMonitorOutput
	ToK8sMonitorOutputWithContext(ctx context.Context) K8sMonitorOutput
}

func (*K8sMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sMonitor)(nil)).Elem()
}

func (i *K8sMonitor) ToK8sMonitorOutput() K8sMonitorOutput {
	return i.ToK8sMonitorOutputWithContext(context.Background())
}

func (i *K8sMonitor) ToK8sMonitorOutputWithContext(ctx context.Context) K8sMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sMonitorOutput)
}

// K8sMonitorArrayInput is an input type that accepts K8sMonitorArray and K8sMonitorArrayOutput values.
// You can construct a concrete instance of `K8sMonitorArrayInput` via:
//
//	K8sMonitorArray{ K8sMonitorArgs{...} }
type K8sMonitorArrayInput interface {
	pulumi.Input

	ToK8sMonitorArrayOutput() K8sMonitorArrayOutput
	ToK8sMonitorArrayOutputWithContext(context.Context) K8sMonitorArrayOutput
}

type K8sMonitorArray []K8sMonitorInput

func (K8sMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sMonitor)(nil)).Elem()
}

func (i K8sMonitorArray) ToK8sMonitorArrayOutput() K8sMonitorArrayOutput {
	return i.ToK8sMonitorArrayOutputWithContext(context.Background())
}

func (i K8sMonitorArray) ToK8sMonitorArrayOutputWithContext(ctx context.Context) K8sMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sMonitorArrayOutput)
}

// K8sMonitorMapInput is an input type that accepts K8sMonitorMap and K8sMonitorMapOutput values.
// You can construct a concrete instance of `K8sMonitorMapInput` via:
//
//	K8sMonitorMap{ "key": K8sMonitorArgs{...} }
type K8sMonitorMapInput interface {
	pulumi.Input

	ToK8sMonitorMapOutput() K8sMonitorMapOutput
	ToK8sMonitorMapOutputWithContext(context.Context) K8sMonitorMapOutput
}

type K8sMonitorMap map[string]K8sMonitorInput

func (K8sMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sMonitor)(nil)).Elem()
}

func (i K8sMonitorMap) ToK8sMonitorMapOutput() K8sMonitorMapOutput {
	return i.ToK8sMonitorMapOutputWithContext(context.Background())
}

func (i K8sMonitorMap) ToK8sMonitorMapOutputWithContext(ctx context.Context) K8sMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sMonitorMapOutput)
}

type K8sMonitorOutput struct{ *pulumi.OutputState }

func (K8sMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sMonitor)(nil)).Elem()
}

func (o K8sMonitorOutput) ToK8sMonitorOutput() K8sMonitorOutput {
	return o
}

func (o K8sMonitorOutput) ToK8sMonitorOutputWithContext(ctx context.Context) K8sMonitorOutput {
	return o
}

// Namespace in which datadog agent is installed.
func (o K8sMonitorOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sMonitor) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

type K8sMonitorArrayOutput struct{ *pulumi.OutputState }

func (K8sMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sMonitor)(nil)).Elem()
}

func (o K8sMonitorArrayOutput) ToK8sMonitorArrayOutput() K8sMonitorArrayOutput {
	return o
}

func (o K8sMonitorArrayOutput) ToK8sMonitorArrayOutputWithContext(ctx context.Context) K8sMonitorArrayOutput {
	return o
}

func (o K8sMonitorArrayOutput) Index(i pulumi.IntInput) K8sMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sMonitor {
		return vs[0].([]*K8sMonitor)[vs[1].(int)]
	}).(K8sMonitorOutput)
}

type K8sMonitorMapOutput struct{ *pulumi.OutputState }

func (K8sMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sMonitor)(nil)).Elem()
}

func (o K8sMonitorMapOutput) ToK8sMonitorMapOutput() K8sMonitorMapOutput {
	return o
}

func (o K8sMonitorMapOutput) ToK8sMonitorMapOutputWithContext(ctx context.Context) K8sMonitorMapOutput {
	return o
}

func (o K8sMonitorMapOutput) MapIndex(k pulumi.StringInput) K8sMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sMonitor {
		return vs[0].(map[string]*K8sMonitor)[vs[1].(string)]
	}).(K8sMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sMonitorInput)(nil)).Elem(), &K8sMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sMonitorArrayInput)(nil)).Elem(), K8sMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sMonitorMapInput)(nil)).Elem(), K8sMonitorMap{})
	pulumi.RegisterOutputType(K8sMonitorOutput{})
	pulumi.RegisterOutputType(K8sMonitorArrayOutput{})
	pulumi.RegisterOutputType(K8sMonitorMapOutput{})
}
