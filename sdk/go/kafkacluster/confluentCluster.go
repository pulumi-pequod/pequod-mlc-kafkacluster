// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafkacluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi-pequod/pequod-mlc-kafkacluster/sdk/go/kafkacluster/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfluentCluster struct {
	pulumi.ResourceState

	// Name of the Confluent environment that was created
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// URL for the Kafka environment.
	KafkaUrl pulumi.StringOutput `pulumi:"kafkaUrl"`
}

// NewConfluentCluster registers a new resource with the given unique name, arguments, and options.
func NewConfluentCluster(ctx *pulumi.Context,
	name string, args *ConfluentClusterArgs, opts ...pulumi.ResourceOption) (*ConfluentCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KafkaClusterName == nil {
		return nil, errors.New("invalid value for required argument 'KafkaClusterName'")
	}
	if args.KafkaTopics == nil {
		return nil, errors.New("invalid value for required argument 'KafkaTopics'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfluentCluster
	err := ctx.RegisterRemoteComponentResource("kafkacluster:index:ConfluentCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type confluentClusterArgs struct {
	// Name to use for kafka cluster display name.
	KafkaClusterName string `pulumi:"kafkaClusterName"`
	// Array of topics for the kafka cluster.
	KafkaTopics []string `pulumi:"kafkaTopics"`
	// Region for cluster. Default is region used by rest of stack.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ConfluentCluster resource.
type ConfluentClusterArgs struct {
	// Name to use for kafka cluster display name.
	KafkaClusterName pulumi.StringInput
	// Array of topics for the kafka cluster.
	KafkaTopics pulumi.StringArrayInput
	// Region for cluster. Default is region used by rest of stack.
	Region pulumi.StringPtrInput
}

func (ConfluentClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*confluentClusterArgs)(nil)).Elem()
}

type ConfluentClusterInput interface {
	pulumi.Input

	ToConfluentClusterOutput() ConfluentClusterOutput
	ToConfluentClusterOutputWithContext(ctx context.Context) ConfluentClusterOutput
}

func (*ConfluentCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentCluster)(nil)).Elem()
}

func (i *ConfluentCluster) ToConfluentClusterOutput() ConfluentClusterOutput {
	return i.ToConfluentClusterOutputWithContext(context.Background())
}

func (i *ConfluentCluster) ToConfluentClusterOutputWithContext(ctx context.Context) ConfluentClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentClusterOutput)
}

// ConfluentClusterArrayInput is an input type that accepts ConfluentClusterArray and ConfluentClusterArrayOutput values.
// You can construct a concrete instance of `ConfluentClusterArrayInput` via:
//
//	ConfluentClusterArray{ ConfluentClusterArgs{...} }
type ConfluentClusterArrayInput interface {
	pulumi.Input

	ToConfluentClusterArrayOutput() ConfluentClusterArrayOutput
	ToConfluentClusterArrayOutputWithContext(context.Context) ConfluentClusterArrayOutput
}

type ConfluentClusterArray []ConfluentClusterInput

func (ConfluentClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfluentCluster)(nil)).Elem()
}

func (i ConfluentClusterArray) ToConfluentClusterArrayOutput() ConfluentClusterArrayOutput {
	return i.ToConfluentClusterArrayOutputWithContext(context.Background())
}

func (i ConfluentClusterArray) ToConfluentClusterArrayOutputWithContext(ctx context.Context) ConfluentClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentClusterArrayOutput)
}

// ConfluentClusterMapInput is an input type that accepts ConfluentClusterMap and ConfluentClusterMapOutput values.
// You can construct a concrete instance of `ConfluentClusterMapInput` via:
//
//	ConfluentClusterMap{ "key": ConfluentClusterArgs{...} }
type ConfluentClusterMapInput interface {
	pulumi.Input

	ToConfluentClusterMapOutput() ConfluentClusterMapOutput
	ToConfluentClusterMapOutputWithContext(context.Context) ConfluentClusterMapOutput
}

type ConfluentClusterMap map[string]ConfluentClusterInput

func (ConfluentClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfluentCluster)(nil)).Elem()
}

func (i ConfluentClusterMap) ToConfluentClusterMapOutput() ConfluentClusterMapOutput {
	return i.ToConfluentClusterMapOutputWithContext(context.Background())
}

func (i ConfluentClusterMap) ToConfluentClusterMapOutputWithContext(ctx context.Context) ConfluentClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentClusterMapOutput)
}

type ConfluentClusterOutput struct{ *pulumi.OutputState }

func (ConfluentClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentCluster)(nil)).Elem()
}

func (o ConfluentClusterOutput) ToConfluentClusterOutput() ConfluentClusterOutput {
	return o
}

func (o ConfluentClusterOutput) ToConfluentClusterOutputWithContext(ctx context.Context) ConfluentClusterOutput {
	return o
}

// Name of the Confluent environment that was created
func (o ConfluentClusterOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfluentCluster) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// URL for the Kafka environment.
func (o ConfluentClusterOutput) KafkaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfluentCluster) pulumi.StringOutput { return v.KafkaUrl }).(pulumi.StringOutput)
}

type ConfluentClusterArrayOutput struct{ *pulumi.OutputState }

func (ConfluentClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfluentCluster)(nil)).Elem()
}

func (o ConfluentClusterArrayOutput) ToConfluentClusterArrayOutput() ConfluentClusterArrayOutput {
	return o
}

func (o ConfluentClusterArrayOutput) ToConfluentClusterArrayOutputWithContext(ctx context.Context) ConfluentClusterArrayOutput {
	return o
}

func (o ConfluentClusterArrayOutput) Index(i pulumi.IntInput) ConfluentClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfluentCluster {
		return vs[0].([]*ConfluentCluster)[vs[1].(int)]
	}).(ConfluentClusterOutput)
}

type ConfluentClusterMapOutput struct{ *pulumi.OutputState }

func (ConfluentClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfluentCluster)(nil)).Elem()
}

func (o ConfluentClusterMapOutput) ToConfluentClusterMapOutput() ConfluentClusterMapOutput {
	return o
}

func (o ConfluentClusterMapOutput) ToConfluentClusterMapOutputWithContext(ctx context.Context) ConfluentClusterMapOutput {
	return o
}

func (o ConfluentClusterMapOutput) MapIndex(k pulumi.StringInput) ConfluentClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfluentCluster {
		return vs[0].(map[string]*ConfluentCluster)[vs[1].(string)]
	}).(ConfluentClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfluentClusterInput)(nil)).Elem(), &ConfluentCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfluentClusterArrayInput)(nil)).Elem(), ConfluentClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfluentClusterMapInput)(nil)).Elem(), ConfluentClusterMap{})
	pulumi.RegisterOutputType(ConfluentClusterOutput{})
	pulumi.RegisterOutputType(ConfluentClusterArrayOutput{})
	pulumi.RegisterOutputType(ConfluentClusterMapOutput{})
}
